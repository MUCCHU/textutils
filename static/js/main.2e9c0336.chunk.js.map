{"version":3,"sources":["components/About.js","components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","useState","color","backgroundColor","myStyle","setmyStyle","btntext","setbtntext","className","style","id","type","onClick","e","border","Navbar","props","mode","to","title","aboutText","toggleMode","htmlFor","defaultProps","TextForm","Text","setText","heading","value","placeholder","onChange","target","rows","toUpperCase","showAlert","toLowerCase","text","document","getElementById","select","navigator","clipboard","writeText","innerHTML","setTimeout","newText","split","join","length","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.2e9c0336.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\nexport default function About() {\r\n    const [myStyle, setmyStyle] = useState({\r\n        color: \"black\",\r\n        backgroundColor: \"white\"\r\n    });\r\n    const [btntext, setbtntext] = useState(\"Enable dark mode\")\r\n    const toggleStyle = (e)=>{\r\n        if(myStyle.color === \"white\"){\r\n            setmyStyle({\r\n                color: \"black\",\r\n                backgroundColor: \"white\"\r\n            });\r\n            setbtntext(\"Enable dark mode\");\r\n        }\r\n        else{\r\n            setmyStyle({\r\n                color: \"white\",\r\n                backgroundColor: \"black\",\r\n                border: \"1px solid black\"\r\n            });\r\n            setbtntext(\"Enable light mode\");\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"container my-3\" style={myStyle}>\r\n            <h2 className=\"my-3\">About Us</h2>\r\n            <div className=\"accordion\" id=\"accordionExample\">\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                        <button className=\"accordion-button\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                            Accordion Item #1\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                        <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                            Accordion Item #2\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                        <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                            Accordion Item #3\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"container my-3\">\r\n                <button onClick={toggleStyle} className=\"btn btn-primary\">{btntext}</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom';\r\nconst Navbar = (props) => {\r\n    return (\r\n        <>\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n                <div className=\"container-fluid\">\r\n                    <Link className=\"navbar-brand\" to=\"/textutils\">{props.title}</Link>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                            <li className=\"nav-item\">\r\n                                <Link className=\"nav-link active\" aria-current=\"page\" to=\"/textutils\">Home</Link>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n                            </li>\r\n                        </ul>\r\n                        <form className=\"d-flex\">\r\n                            <div className=\"form-check form-switch\">\r\n                                <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\r\n                                <label className={`form-check-label  text-${props.mode===\"light\" ? \"dark\" : \"light\"}`} htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </>\r\n    );\r\n}\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string.isRequired\r\n}\r\nNavbar.defaultProps = {\r\n    title: \"Set title here\",\r\n    aboutText: \"About\"\r\n}\r\n\r\nexport default Navbar;","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { useState } from 'react';\r\n\r\nexport default function TextForm(props) {\r\n    const [Text, setText] = useState(\"\");\r\n    const handleUpClick = ()=>{\r\n        setText(Text.toUpperCase());\r\n        props.showAlert(\"Converted to Upper case!\", \"success\");\r\n    }\r\n    const handleLoClick = ()=>{\r\n        setText(Text.toLowerCase());\r\n        props.showAlert(\"Converted to Lower case!\", \"success\");\r\n    }\r\n    const handleCopy = (e)=>{\r\n        var text = document.getElementById(\"exampleFormControlTextarea1\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        e.target.innerHTML = \"Copied\";\r\n        props.showAlert(\"Copied to clipboard!\", \"success\");\r\n        setTimeout(() => {\r\n            e.target.innerHTML = \"Copy text\"\r\n        }, 2000);\r\n    }\r\n    const handleExtraspaces = ()=>{\r\n        let newText = Text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Removed all extra spaces!\", \"success\");\r\n    }\r\n    const handleCleartext = ()=>{\r\n        setText(\"\");\r\n        props.showAlert(\"Cleared the text!\", \"success\");\r\n    }\r\n    return (\r\n        <>\r\n        <div className=\"container my-3\">\r\n                <h2 style={{color: props.mode===\"light\" ? \"black\" : \"white\"}}>{props.heading}</h2>\r\n                <div className=\"mb-3\">\r\n                    <textarea\r\n                     className=\"form-control\"\r\n                        style={{ backgroundColor: props.mode === \"light\" ? \"white\" : \"grey\", color: props.mode === \"light\" ? \"black\" : \"white\"}}\r\n                     id=\"exampleFormControlTextarea1\"\r\n                     value={Text}\r\n                     placeholder=\"Enter Your text here\"\r\n                     onChange={(e)=>{setText(e.target.value)}}\r\n                     rows=\"8\"></textarea>\r\n                </div>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Convert to UpperCase</button>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleLoClick}>Convert to LowerCase</button>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleCopy}>Copy Text</button>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleExtraspaces}>Remove extra spaces</button>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleCleartext}>Clear Text</button>\r\n        </div>\r\n            <div className=\"container my-3\" style={{ color: props.mode === \"light\" ? \"black\" : \"white\" }}>\r\n            <h2>Your Text summary</h2>\r\n                <p>{Text.split(\" \").length} Words and {Text.length} characters </p>\r\n                <p>{0.08 * Text.split(\" \").length} Minutes to read</p>\r\n                <h2>Preview</h2>\r\n                <p>{Text.length > 0 ? Text: \"Enter text to preview\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nTextForm.propTypes = {\r\n    heading: PropTypes.string.isRequired\r\n}\r\nTextForm.defaultProps = {\r\n    heading: \"Heading\"\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div>\r\n            <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import './App.css';\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport { useState } from 'react';\nimport Alert from './components/Alert';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message, type)=>{\n    setAlert({\n      msg: message,\n      type: type\n    });\n    setTimeout(() => {\n     setAlert(null); \n    }, 1500);\n  }\n  const toggleMode = ()=>{\n    if(mode=== \"light\"){\n      setMode(\"dark\");\n      document.body.style.backgroundColor =\"#042743\";\n      showAlert(\"Dark mode has been enabled\", \"success\")\n      document.title = \"Text Utils - Dark\"\n    }else{\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been enabled\", \"success\")\n      document.title = \"Text Utils - Light\"\n    }\n  }\n  return (\n    <>      \n    <Router>\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode = {toggleMode}/>\n      <Alert alert={alert}/>\n      <Switch>\n        <Route exact path=\"/about\">\n          <About />\n        </Route>\n        <Route exact path=\"/textutils\">\n        <TextForm heading=\"Enter the text to analyse\" mode={mode} showAlert={showAlert} />\n        </Route>\n      </Switch>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}